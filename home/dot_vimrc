"########################################################################
"██╗   ██╗██╗███╗   ███╗██████╗  ██████╗
"██║   ██║██║████╗ ████║██╔══██╗██╔════╝
"██║   ██║██║██╔████╔██║██████╔╝██║     
"╚██╗ ██╔╝██║██║╚██╔╝██║██╔══██╗██║     
 "╚████╔╝ ██║██║ ╚═╝ ██║██║  ██║╚██████╗
  "╚═══╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝
"########################################################################

"########################### basic settings ############################
" encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8

set number relativenumber   "hybrid numbers
set noignorecase "use letter case to search
set autowrite "auto save file when change when multiple files open
set t_vb= "disable visual bell
let skip_defaults_vim=1
set nocompatible "allow vim-y things
set linebreak "this will wrap `` for long words even if new line started
set noshowmatch "no more little pause if you type brackets
set ruler "ruler is on by default, just in case
"set scrolloff=999 keep cursor in the middle, or some big other number
set scrolloff=7 "keep cursor at border of screen
set showcmd " shows info on bottom right
set icon "sync terminal title with current file edited
"set wrap linebreak nolist soft wrap only wraps it but not formats it
set viminfo='20,<1000,s1000 "increase yank buffer size if you want to
" yank from one file to another
set wildmode=longest,list,full "autocompletion for ex commands with tabs
set hlsearch "all the /searchterms get highlighted on your display
"set nohlsearch to turn the highligted searchterms off :noh
set incsearch "to loop through all the searched elements with `n/N`
match IncSearch '\s\+$' " mark trailing spaces as errors
set history=100 "memory management (x history (: history))
set hidden "stops complaining when switching from buffer with changes
"default is 1s, make keys like j,k that have jj,kk mapped for escaping be written with less delay
set timeoutlen=200 

" set both german and english to spellcheck
" to download german dictonary run within vim:
":setl spell spelllang=de
set spelllang=en_us,de_de
" vertical pane no border |
set fillchars+=vert:\ 

" avoid most of the 'Hit Enter ...' messages
set shortmess=aoOtTI

" no backups
set nobackup
set nowritebackup
set noswapfile

" write good code
set textwidth=72
"set colorcolumn=73
highlight ColorColumn ctermbg=0 guibg=lightgrey

if v:version >= 800
  " stop vim from silently messing with files that it shouldn't
  set nofixendofline

  " better ascii friendly listchars
  " makes your list characters prettier (set list)
  "set listchars=space:*,trail:*,nbsp:*,extends:>,precedes:<,tab:\|>
  set listchars=tab:→\ ,eol:↲,nbsp:␣,space:·,trail:·,extends:⟩,precedes:⟨

  " i hate automatic folding
  set foldmethod=manual " manual foldingdefault (zf/zd)
  set nofoldenable "disable folding, when paragraphs can be minimized and
  "maximized with spacebar
endif

" not a fan of bracket matching or folding
if has("eval") " vim-tiny detection
  let g:loaded_matchparen=1
endif

" wrap around when searching
set wrapscan
set nowrap

" faster scrolling
set ttyfast

" copy & past between 2 files
set viminfo='20,<1000,s1000 " prevents truncated yanks, deletes, etc.
"set viminfo=%,<800,'10,/50,:100,h,f0,n~/.vim/cache/.viminfo
"           | |    |   |   |    | |  + viminfo file path
"           | |    |   |   |    | + file marks 0-9,A-Z 0=NOT stored
"           | |    |   |   |    + disable 'hlsearch' loading viminfo
"           | |    |   |   + command-line history saved
"           | |    |   + search history saved
"           | |    + files marks saved
"           | + lines saved each register (old name for <, vi6.2)
"           + save/restore buffer list
"######################### low level settings ##########################
set formatoptions-=t   " don't auto-wrap text using text width
set formatoptions+=c   " autowrap comments using textwidth with leader
set formatoptions-=r   " don't auto-insert comment leader on enter in insert
set formatoptions-=o   " don't auto-insert comment leader on o/O in normal
set formatoptions+=q   " allow formatting of comments with gq
set formatoptions-=w   " don't use trailing whitespace for paragraphs
set formatoptions-=a   " disable auto-formatting of paragraph changes
set formatoptions-=n   " don't recognized numbered lists
set formatoptions+=j   " delete comment prefix when joining
set formatoptions-=2   " don't use the indent of second paragraph line
set formatoptions-=v   " don't use broken 'vi-compatible auto-wrapping'
set formatoptions-=b   " don't use broken 'vi-compatible auto-wrapping'
set formatoptions+=l   " long lines not broken in insert mode
set formatoptions+=m   " multi-byte character line break support
set formatoptions+=M   " don't add space before or after multi-byte char
set formatoptions-=B   " don't add space between two multi-byte chars in join
set formatoptions+=1   " don't break a line after a one-letter word
"############################ nice features ############################
" Copy/Paste/Cut with system clipboard not just vim buffer:
" only works if compiled with +clipboard check: `vim --version`
if has('unnamedplus')
  set clipboard^=unnamed,unnamedplus
endif
" Vmap for maintain Visual Mode after shifting > and <
vmap < <gv
vmap > >gv



" Currently I am using function below, mainly cause i wan 10j to center
" screen too, not just Ctrl-d and searches
" Search mappings: These will make it so that going to the next one in
" a search will center on the line it's found in.
"nnoremap n nzzzv
"nnoremap N Nzzzv
" Going half page up and down also auto centers screen in middle
"nnoremap <C-u> <C-u>zz
"nnoremap <C-d> <C-d>zz

" experimental gotta try this, center the screen always
" this works for all cases including in insert or visual mode, also works
" for search and C-d case making the above absolete. However it its
" resource intense gotta check if my vim gets laggy from using this
autocmd CursorMoved,CursorMovedI * call Center_cursor()

" experimental gotta try this:
function! Center_cursor()
    let pos = getpos(".")
    normal! zz
    call setpos(".", pos)
endfunction

" make Y consitent with D and C (yank til end)
map Y y$ 
" vertically center document when entering insert mode
autocmd InsertEnter * norm zz
" search and replace [foo] to [foo1] globally
nnoremap S :%s//gI<Left><Left><Left>
" Map alternatives the <ESC> key (<C-[> already is)
inoremap jj <Esc>
cnoremap jj <Esc>
inoremap kk <Esc>
cnoremap kk <Esc>
inoremap kj <Esc>
cnoremap kj <Esc>
" no arrow keys (vi muscle memory)
noremap <up> :echoerr "Umm, use k instead"<CR>
noremap <down> :echoerr "Umm, use j instead"<CR>
noremap <left> :echoerr "Umm, use h instead"<CR>
noremap <right> :echoerr "Umm, use l instead"<CR>
inoremap <up> <NOP>
inoremap <down> <NOP>
inoremap <left> <NOP>
inoremap <right> <NOP>
" insert new line without going into insert-mode
nmap oo m`o<Esc>``
nmap OO m`O<Esc>``

" better command-line completion
set wildmenu

" disable search highlighting with <C-L> when refreshing screen
nnoremap <C-L> :nohl<CR><C-L>

" enable omni-completion
set omnifunc=syntaxcomplete#Complete

"########################## syntax mandatory ###########################
"syntax on
if has("syntax")
  syntax enable
endif
filetype plugin on "allow sensing the filetype
"filetype plugin indent on "allow sensing the filetype
"############################### plugins ###############################
if empty(glob('~/.vim/autoload/plug.vim')) " make sure plug is installed
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif
" look for .vim if it does not exist download&install plugins
if filereadable(expand("~/.vim/autoload/plug.vim"))
  call plug#begin('~/.vimplugins')
"######################### plugins essentials ##########################
  "Plug 'itchyny/lightline.vim' "info footer
  "Plug 'mengelbrecht/lightline-bufferline' "info footer with buffer tabs
  "Plug 'PProvost/vim-ps1' "windows powershell vim support
  "Plug 'tpope/vim-fugitive' "git integration
  Plug 'conradirwin/vim-bracketed-paste'
  Plug 'wakatime/vim-wakatime' "keep track of where time spent
  Plug 'dense-analysis/ale'

  "Plug 'puremourning/vimspector' " Debugger
  "Plug 'preservim/nerdcommenter' " Comment your code quickly
  "Plug 'https://gitlab.com/ivan-cukic/zeal-lynx-cli' "CLI zeal docs
  "Plug 'KabbAmine/zeavim.vim' "GUI zeal docs
"################################# fzf #################################
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'airblade/vim-rooter' "helps fzf to look at git repos
  Plug 'majutsushi/tagbar' "tags in memory
"########################## plugins languages ##########################
  Plug 'vim-pandoc/vim-pandoc'
  Plug 'rwxrob/vim-pandoc-syntax-simple'
  "Plug 'cespare/vim-toml'
  Plug 'sheerun/vim-polyglot' " better syntax highlighting for many lang
  " Go
  Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
  " Javascript
  "Plug '/MaxMEllon/vim-jsx-pretty' "react syntax highlighting
  "Plug 'dense-analysis/ale' "JS linter :ALEToggle
  Plug 'moll/vim-node' " Node.js
  Plug 'godlygeek/tabular' " make quick tables, clean json data
  Plug 'pangloss/vim-javascript'
  " C
  "Plug 'vim-scripts/c.vim', {'for': ['c', 'cpp']}
  "Plug 'ludwig/split-manpage.vim'
  " Python
  "Plug 'davidhalter/jedi-vim'
  "Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'}
  "Plug 'plytophogy/vim-virtualenv'
  " Plug 'python-mode/python-mode'
  " HTML/CSS
  "Plug 'mattn/emmet-vim'
  "Plug 'hail2u/vim-css3-syntax'
  Plug 'ap/vim-css-color' "css color preview
  "Plug 'tpope/vim-haml'
  "Plug 'mattn/emmet-vim'
"############################ colorschemes #############################
  Plug 'morhetz/gruvbox' "color scheme
  "Plug 'HerringtonDarkholme/yats.vim' " correct syntax hightlight for gruvbox
"############################ plugins stuff ############################
  "Plug 'justinmk/vim-sneak' "move cursor quickly, need to test if I like
  "Plug '~/.vimplugins/yankring'
  "Plug 'preservim/nerdtree'
  "Plug 'Xuyuanp/nerdtree-git-plugin'
  "Plug 'elzr/vim-json' better syntax for json
  "Plug 'romainl/vim-devdocs' "devdocs.io in vim
  "autocomplete
  "Plug 'neoclide/coc.nvim', {'branch': 'release'} "powerful autocomplete
  " tags
  "Plug 'xolox/vim-easytags' "Ctag automater
  call plug#end()
"########################### plugins configs ###########################
  " set foldcolumn=0 does not work however disable the folding module from 
  " 'git-pandoc' will
  let g:pandoc#modules#disabled = ["folding"]
  set nocompatible "needed for vim-polygot
  colorscheme gruvbox
  set background=dark
  
  " KabbAmine/zeavim.vim
  nmap <Leader>z <Plug>Zeavim
  vmap <Leader>z <Plug>ZVVisSelection
  nmap gz <Plug>ZVOperator
  nmap <Leader><Leader>z <Plug>ZVKeyDocset

  " pandoc
  let g:pandoc#formatting#mode = 'h' " A'
  let g:pandoc#formatting#textwidth = 72
  " golang:
  let g:go_fmt_fail_silently = 0 " let me out even with errors
  let g:go_fmt_command = 'goimports' " autoupdate import
  let g:go_fmt_autosave = 1
  let g:go_gopls_enabled = 1
  let g:go_highlight_types = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_functions = 1
  let g:go_highlight_function_calls = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_extra_types = 1
  let g:go_highlight_variable_declarations = 1
  let g:go_highlight_variable_assignments = 1
  let g:go_highlight_build_constraints = 1
  let g:go_highlight_diagnostic_errors = 1
  let g:go_highlight_diagnostic_warnings = 1
  "let g:go_auto_type_info = 1 " forces press Enter too much
  let g:go_auto_sameids = 0
  "let g:go_metalinter_command='golangci-lint'
  "let g:go_metalinter_command='golint'
  "let g:go_metalinter_autosave=1
  set updatetime=100
  "let g:go_gopls_analyses = { 'composites' : v:false }
  au FileType go nmap <leader>t :GoTest!<CR>
  au FileType go nmap <leader>v :GoVet!<CR>
  au FileType go nmap <leader>b :GoBuild!<CR>
  au FileType go nmap <leader>c :GoCoverageToggle<CR>
  au FileType go nmap <leader>i :GoInfo<CR>
  au FileType go nmap <leader>l :GoMetaLinter!<CR>
  au FileType go nmap <leader>m ilog.Print("made")<CR><ESC>
  au FileType go nmap <leader>n iif err != nil {return err}<CR><ESC>

  " ale config:
  let g:ale_sign_error = '☠'
  let g:ale_sign_warning = '🙄'
  let g:ale_linters = {'go': ['gometalinter', 'gofmt','gobuild']}

  "" lightline config:
  "let g:lightline = {
  "    \ 'colorscheme': 'wombat',
  "    \ 'active': {
  "    \   'left': [ [ 'mode', 'paste' ],
  "    \             [ 'gitbranch', 'readonly', 'modified' ],
  "    \             [ 'buffers' ] ]
  "    \ },
  "    \ 'component_function': {
  "    \   'gitbranch': 'FugitiveHead'
  "    \ },
  "    \ }
  "set laststatus=2
  "autocmd BufWritePost,TextChanged,TextChangedI * call lightline#update()
  "let g:lightline.component_expand = {'buffers': 'lightline#bufferline#buffers'}
  "let g:lightline.component_type   = {'buffers': 'tabsel'}
  "

  " coc autocomplete config
  " let g:coc_global_extensions = [
  " \ 'coc-snippets',
  " \ 'coc-tsserver',
  " \ 'coc-eslint',
  " \ 'coc-prettier',
  " \ 'coc-json',
  " \ ]
else
  autocmd vimleavepre *.go !gofmt -w % " backup if fatih fails
endif

" force loclist to always close when buffer does (affects vim-go, etc.)
augroup CloseLoclistWindowGroup
  autocmd!
  autocmd QuitPre * if empty(&buftype) | lclose | endif
augroup END

" format perl on save
if has("eval") " vim-tiny detection
fun! s:Perltidy()
  let l:pos = getcurpos()
  silent execute '%!perltidy -i=2'
  call setpos('.', l:pos)
endfun
"autocmd FileType perl autocmd BufWritePre <buffer> call s:Perltidy()
endif

" format shell on save
if has("eval") " vim-tiny detection
" TODO check for shfmt and shellcheck before defining
" FIXME stop from blowing away file when there is shell error
fun! s:FormatShell()
  let l:pos = getcurpos()
  "silent execute '%!shfmt' " FIXME: bug report to shfmt
  call setpos('.', l:pos)
endfun
autocmd FileType sh autocmd BufWritePre <buffer> call s:FormatShell()
endif

" fill in empty markdown links with duck.com search
" [some thing]() -> [some thing](https://duck.com/lite?kae=t&q=some thing)
autocmd vimleavepre *.md !perl -p -i -e 's,\[([^\]]+?)\]\(\),[\1](https://duck.com/lite?q=\1),g' %
""TODO get :GoDoc to open in vertical split like :help ~/.vim/after/ftplugin/help.vim, or tmux popup
" these settings are in aftter/ftplugin:
"autocmd FileType python nnoremap <silent><buffer> K <Esc>:silent! call system("tmux display-popup -w 80% -h 60% -E pydoc " . expand('<cword>'))<CR>
"autocmd FileType perl noremap <silent><buffer> K <Esc>:silent! call system("tmux display-popup -w 80% -h 60% -E perldoc -f " . expand('<cword>'))<CR>
"autocmd FileType sh nnoremap <silent><buffer> K <Esc>:silent! call system("tmux display-popup -w 80% -h 60% -E man " . expand('<cword>'))<CR>
autocmd FileType go nnoremap <silent><buffer> K <Esc>:silent! call system("tmux display-popup -w 80% -h 60% -E go doc " . expand('<cword>'))<CR>
"FIXME it's `go doc fmt.Printf` and not `go doc Printf`, hence K with the "cursor on Printf won't work, needs to include pkgname
"TODO JS documentation wanted badly
"autocmd FileType javascript noremap <silent><buffer> K <Esc>:silent! call system("tmux split-window docs " . expand('<cword>'))<CR>
"autocmd FileType javascript setlocal keywordprg=open\ https://developer.mozilla.org/search?topic=api\\&topic=js\\&q=\
"TODO this plugin but with w3m 'ivan-cukic/zeal-lynx-cli'
"############################### buffer ################################
"" help you to detect filetypes that are not automatically detected
au bufnewfile,bufRead bashconfig set filetype=sh
au bufnewfile,bufRead *.profile set filetype=sh
au bufnewfile,bufRead *.crontab set filetype=crontab
au bufnewfile,bufRead *ssh/config set filetype=sshconfig
au bufnewfile,bufRead *gitconfig set filetype=gitconfig
au bufnewfile,bufRead /tmp/psql.edit.* set syntax=sql
au bufnewfile,bufRead *.muttrc set filetype=muttrc
au bufnewfile,bufRead *.tmpl set filetype=go
au bufnewfile,bufRead /tmp/calcurse*,~/.local/share/calcurse/notes/* set filetype=markdown
au bufnewfile,bufRead $SNIPPETS/md/* set ft=pandoc
au bufnewfile,bufRead $SNIPPETS/sh/* set ft=sh
au bufnewfile,bufRead $SNIPPETS/bash/* set ft=bash
au bufnewfile,bufRead $SNIPPETS/go/* set ft=go
au bufnewfile,bufRead $SNIPPETS/c/* set ft=c
au bufnewfile,bufRead $SNIPPETS/html/* set ft=html
au bufnewfile,bufRead $SNIPPETS/css/* set ft=css
au bufnewfile,bufRead $SNIPPETS/js/* set ft=javascript
au bufnewfile,bufRead $SNIPPETS/python/* set ft=python
au bufnewfile,bufRead $SNIPPETS/perl/* set ft=perl
au bufnewfile,bufRead user-data set ft=yaml
au bufnewfile,bufRead meta-data set ft=yaml
au bufnewfile,bufRead *.ddl set ft=sql
au bufnewfile,bufRead *.bash* set ft=bash
au bufnewfile,bufRead *.gotmpl set ft=go
au bufnewfile,bufRead .dockerignore set filetype=gitignore
au bufnewfile,bufRead *.go set spell spellcapcheck=0
au bufnewfile,bufRead commands.yaml set spell
au bufnewfile,bufRead *.txt set spell

"" start at last place you were editing
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

"fix bork bash detection
if has("eval")  " vim-tiny detection
fun! s:DetectBash()
    if getline(1) == '#!/usr/bin/bash' || getline(1) == '#!/bin/bash'
        set ft=bash
        set shiftwidth=2
    endif
endfun
autocmd BufNewFile,BufRead * call s:DetectBash()
endif

" displays all the syntax rules for current position, useful
" when writing vimscript syntax plugins
if has("syntax")
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
endif

" might be needed for C-x/C-o autocomplete
"set omnifunc=javascriptcomplete#CompleteJS
"set omnifunc=htmlcomplete#CompleteTags
"set omnifunc=csscomplete#CompleteCSS
"set omnifunc=phpcomplete#CompletePHP

"########################## custom functions ###########################
" Removes trailing spaces
" e flag: supress error message
function TrimWhiteSpace()
  %s/\s\+$//e
  ''
endfunction
" Edit/Reload vimrc configuration file
nnoremap confe :e $HOME/.vimrc<CR>
nnoremap confr :source $HOME/.vimrc<CR>
"########################### leader, f-keys ############################

" solution (Fedora): select 'v' + normal yank 'y', paste 'leader p'
" current copy only allows to copy whole line or multiple lines but not
" only the visually selected text
"map <Leader>p :call system('xclip -sel clipboard', @0)<CR>
let mapleader ="\<Space>"
" needed for spacebar leader, to avoid character move with spacebar
nnoremap <SPACE> <Nop>
" yank 1line: `v leader yy`
" yank 10line: `v 10j leader yy`
" problem: select 'v' + yank 'leader yy', copies whole line
" requires 'xclip' but still better than installing bloated 'gvim' to get +clipboard
vmap <Leader>yy :!xclip -f -sel clip<CR>
"map <Leader>pp mz: -1r !xclip -o -sel clip<CR>`z
noremap <Leader>p :r !xclip -o -sel clip<CR>


map <F1> :set number! relativenumber!<CR>
nmap <F2> :call <SID>SynStack()<CR>
" toggle autoindent+autocomment on/off: (:set paste, :set nopaste)
set pastetoggle=<F3> 
map <F4> :set list!<CR>
map <F5> :set cursorline! cursorcolumn!<CR>
" hover over tag press F6 to see all files with tag
" https://vim.fandom.com/wiki/Find_in_files_within_Vim
map <F6> :execute "vimgrep /" . expand("<cword>") . "/j **" <Bar> cw<CR>
map <F7> :set spell!<CR>
map <F8> :NERDTreeToggle<CR>
nmap <F9> :TagbarToggle<CR>
" Automatically delets all trailing whitespace on save.
map <F10> :call TrimWhiteSpace()<CR>
map! <F10> :call TrimWhiteSpace()<CR>
map <F12> :set fdm=indent<CR>
let g:tagbar_autofocus = 1

nnoremap <Leader><Leader>s :%s//g <Left><Left><Left>


" vim vanilla commands:
"switch buffers with :buffer tab tab (Tried to keybind did not work)
"switch buffers with second command :b[Num], :b1 for buffer 1
"nmap <silent> <Leader>b :ls<cr>
" Switch buffer to last edited file
" If I need to switch to more than just the last edited file:
" Install Plugin: /ton/vim-bufsurf
nmap <silent> <Leader>n :e #<cr>

" fzf commands:
" switch buffers
" If many keybindings use <leader><leader>b.. :Buffers loads slow
" if <leader>b :Buffers it's also slow
" Solution: only use double leader for :Buffers
nmap <silent> <leader><leader>b :Buffers<cr>
" search all buffers:
nmap <silent> <Leader>b/ :Lines<cr>
" search current buffer:
nmap <silent> <Leader>b. :BLines<cr>
" search vim command history:
nmap <silent> <Leader>h :History:<cr>
" search vim help
nmap <silent> <Leader>t :Helptags<cr>
" search filenames:
nmap <silent> <Leader>O :FZF<cr>
" search content files with ripgrep:
nmap <silent> <Leader>o :Rg<cr>

" git commands: vim-fugitive plugin
noremap <Leader>ga :Gwrite<CR>
noremap <Leader>gc :Gcommit<CR>
noremap <Leader>gsh :Gpush<CR>
noremap <Leader>gll :Gpull<CR>
noremap <Leader>gs !!git status<CR>
noremap <Leader>gb :Gblame<CR>
noremap <Leader>gd :Gvdiff<CR>
noremap <Leader>gr :Gremove<CR>
" fzf search git graph and checkout commit:
" Loads slow with only one leader
nmap <Leader><Leader>g :Commits<cr>

" autocomplete
"double space to enter auto
inoremap <Leader><Leader> <C-x><C-o>
"C-n auto & navigate autocomplete-menu
inoremap <C-j> <C-n>
"navigate autocomplete-menu
inoremap <C-k> <C-p>

" displays all the syntax rules for current position, useful
" when writing vimscript syntax plugins (F2)
function! <SID>SynStack()
	if !exists("*synstack")
		return
	endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
"########################### visual settings ###########################
set t_Co=256 " set  256bit color mode
" makes visual mode highlighting blue
highlight Visual cterm=bold ctermbg=Blue ctermfg=NONE
" visual effect on F5 cursor line changed to underline
hi clear CursorLine
highlight CursorLine ctermbg=Yellow guibg=#2b2b2b
highlight CursorColumn ctermbg=Yellow guibg=#2b2b2b

" make github colorschemes transparent - needs to be after Plugin stuff
hi Normal ctermbg=NONE
hi! NonText ctermbg=NONE guibg=NONE
hi! Normal ctermbg=NONE guibg=NONE
" make gutter less annoying
hi SignColumn ctermbg=NONE

" base default color changes (gruvbox dark friendly)
hi StatusLine ctermfg=black ctermbg=NONE
hi StatusLineNC ctermfg=black ctermbg=NONE
hi Normal ctermbg=NONE
hi Special ctermfg=cyan
hi LineNr ctermfg=black ctermbg=NONE
hi SpecialKey ctermfg=black ctermbg=NONE
hi ModeMsg ctermfg=black cterm=NONE ctermbg=NONE
hi MoreMsg ctermfg=black ctermbg=NONE
hi NonText ctermfg=black ctermbg=NONE
hi vimGlobal ctermfg=black ctermbg=NONE
hi ErrorMsg ctermbg=234 ctermfg=darkred cterm=NONE
hi Error ctermbg=234 ctermfg=darkred cterm=NONE
hi SpellBad ctermbg=234 ctermfg=darkred cterm=NONE
hi SpellRare ctermbg=234 ctermfg=darkred cterm=NONE
hi Search ctermbg=236 ctermfg=darkred
hi vimTodo ctermbg=236 ctermfg=darkred
hi Todo ctermbg=236 ctermfg=darkred
hi IncSearch ctermbg=236 cterm=NONE ctermfg=darkred
hi MatchParen ctermbg=236 ctermfg=darkred

" color overrides
au FileType * hi StatusLine ctermfg=black ctermbg=NONE
au FileType * hi StatusLineNC ctermfg=black ctermbg=NONE
au FileType * hi Normal ctermbg=NONE
au FileType * hi Special ctermfg=cyan
au FileType * hi LineNr ctermfg=black ctermbg=NONE
au FileType * hi SpecialKey ctermfg=black ctermbg=NONE
au FileType * hi ModeMsg ctermfg=black cterm=NONE ctermbg=NONE
au FileType * hi MoreMsg ctermfg=black ctermbg=NONE
au FileType * hi NonText ctermfg=black ctermbg=NONE
au FileType * hi vimGlobal ctermfg=black ctermbg=NONE
au FileType * hi goComment ctermfg=black ctermbg=NONE
au FileType * hi ErrorMsg ctermbg=234 ctermfg=darkred cterm=NONE
au FileType * hi Error ctermbg=234 ctermfg=darkred cterm=NONE
au FileType * hi SpellBad ctermbg=234 ctermfg=darkred cterm=NONE
au FileType * hi SpellRare ctermbg=234 ctermfg=darkred cterm=NONE
au FileType * hi Search ctermbg=236 ctermfg=darkred
au FileType * hi vimTodo ctermbg=236 ctermfg=darkred
au FileType * hi Todo ctermbg=236 ctermfg=darkred
au FileType * hi IncSearch ctermbg=236 cterm=NONE ctermfg=darkred
au FileType * hi MatchParen ctermbg=236 ctermfg=darkred
au FileType markdown,pandoc hi Title ctermfg=yellow ctermbg=NONE
au FileType markdown,pandoc hi Operator ctermfg=yellow ctermbg=NONE
au FileType markdown,pandoc set tw=0
au FileType yaml hi yamlBlockMappingKey ctermfg=NONE
au FileType yaml set sw=2
au FileType bash set sw=2
au FileType c set sw=8
au FileType markdown,pandoc noremap j gj
au FileType markdown,pandoc noremap k gk
au FileType sh set noet

set cinoptions+=:0
"custom statusline
set ruf=%30(%=%#LineNr#%.50F\ [%{strlen(&ft)?&ft:'none'}]\ %l:%c\ %p%%%)


" lightline: remove yellow -- INSERT -- etc. message at bottom
set noshowmode

" all these are about indent:
set autoindent " you should turn it off when you are pasting
set noflash
set expandtab "if you don't like tabs
set smartindent "same as >> but when you wanna do a new line
set smarttab
set tabstop=2 "settings for your notes and stuff, don't use to code with it
set softtabstop=2 "related to tabstop
set shiftwidth=2 "if you want lines to move in like with tabs `3>>` will move 3 lines in

"########################### 🏡 it's personal ###########################
" read personal/private vim configuration (keep last to override)
"set rtp^=~/.vimpersonal
"set rtp^=~/.vimprivate
"set rtp^=~/.vimwork
