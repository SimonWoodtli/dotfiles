{{- /*                                                                          
* This file supports Go's text/template language, sprig functions and
  some custom functions from `chezmoi` itself.
* Used to customize configuration when doing a `chezmoi init`                   
                                                                                
You have two choices for how to add your own data, and you can
mix-and-match if you like. You can add data directly in your Chezmoi
config file, or, into a stand-alone data  file. For now, it makes no
difference where you define your data, but when you start to use Chezmoi
across multiple computers you’ll find that it’s best to define data
that’s universal in the stand-alone data file (.chezmoidata.yaml), and
data that changes from computer to computer in the config file
(.chezmoi.yaml.tmpl).
                                                                                
In my docker workspace auto build image I could include a env. variable
"WORKSPACE". Same is true for a build by file VM "HEADLESS". Which if set
would fail condition for interactive setup.
                                                                                
Important:                                                                         
                                                                                   
1. If you use variables inside of conditionals they need to be
initialized with a default value at first, that gets reassigned in you
condition                                                                          
2. Minimise your use of the prompt functions in your config template —
you don’t want to be overwhelmed each time you update the template and
have to re-init!
3. Distinguish between specific computers by hostname                              
4. Use the config template to define useful boolean data fields, this
will make the if actions in your templates much easier to read
5. To test output of this template: `chezmoi execute-template --init
--promptString email=xnasero@posteo.net < $(chezmoi
source-path)/.chezmoi.yaml.tmpl` */ -}} 


{{- /* Default values for variable that are used in conditionals.
They cannot be initialized and set directly in a conditional statement.*/ -}}
{{- $personal := false -}}
{{- $secrets := false -}}
{{- $key_recipient := false -}}
{{- $key_identity := false -}}
{{- $gitemail := "" -}}
{{- $gituser := "" -}}
{{- $configFileExist := output "bash" "-c" "$HOME/Repos/github.com/SimonWoodtli/dotfiles/scripts/__template-scripts/file-exist.sh $HOME/.config/chezmoi/chezmoi.yaml" | trim -}}{{- /* exec external script*/ -}}
{{- $interactive := not (any (env "WORKSPACE") (env "HEADLESS")) -}}{{- /* set true if it can't find $WORKSPACE or $HEADLESS */ -}}

{{- /* Recognize OS: */ -}}
{{ $isMac := eq .chezmoi.os "darwin" }}
{{- $osid := .chezmoi.os -}}
{{- if hasKey .chezmoi.osRelease "id" -}}
{{-   $osid = printf "%s-%s" .chezmoi.os .chezmoi.osRelease.id -}}
{{- end -}}
{{- /* Set different variables on different operating systems here. */ -}}



{{- /* Recognize Host: */ -}}
{{- /* Set different variables on differen Hosts here. */ -}}

{{- /* Prompt email question only once at first `chezmoi init`
Chezmoi promptStringOnce variable reads from .config/chezmoi.yaml. But
not only that it requires the file to exist or throws an error. It would be
great if it would fall back to promptString function if the file is not
there but ... Well that is what this hacked conditional code is for.  
Chezmoi also needs to be set up interactively or else no prompt input is
required. */ -}}
{{- if (and (eq $configFileExist "true") ($interactive)) -}}
{{- $gitemail = promptStringOnce .git "email" "What is your git email address" "xnasero@posteo.net" -}}
{{- else if $interactive -}}
{{- $gitemail = promptString "What is your git email address" "xnasero@posteo.net" -}}
{{- else -}}
{{- $gitemail = coalesce (env "GITEMAIL") "default@default.com" -}}
{{- end -}}

{{- /* Get gituser: */ -}}
{{- if (and (eq $configFileExist "true") ($interactive)) -}}
{{- $gituser = promptStringOnce .git "user" "What is your git username?" "SimonWoodtli" -}}
{{- else if $interactive -}}
{{- $gituser = promptString "What is your git username" "SimonWoodtli" -}}
{{- else }}
{{- $gituser = coalesce (env "GITUSER") (env "USERNAME") (env "USER") .chezmoi.username -}}
{{- end -}}

{{- if eq $gituser "SimonWoodtli" -}}
{{- $key_recipient = "age1kuank5mmsy2yt5gz30rrygqnptuqkunyrxa34ugyn2k3prrtggzs8uksws" -}}
{{- $key_identity = (expandenv "$HOME/Private/bin/age/key-chezmoi") -}}
{{- $personal = true -}}
{{- $secrets = true -}}
{{- end -}}

{{- /* WRITE TO CONFIG FILE:
Here we write the created variables to the config file, so they can be used in other templates.
With `chezmoi data` you see all the variables available
This template (.chezmoy.yaml.tmpl) auto generates auto and writes to ~/.config/chezmoi/chezmoi.toml */ -}}

{{- /* File encryption: */ -}}
{{- if $secrets -}}
encryption: age
age:
  recipient: {{ $key_recipient }}
  identity: {{ $key_identity }}
{{ end -}}
{{/* Custom path and name for my dotfile repo, (default ~/.local/share/chezmoi): */ -}}
sourceDir: {{ coalesce (env "CHEZMOI") (expandenv "$HOME/Repos/github.com/SimonWoodtli/dotfiles/home") }}
{{/* Data: */ -}}
data:
  osid: {{ $osid }}
  isMac: {{ $isMac }}
  {{/* coalesce is like default, but it allows for multiple default
  arguments and picks the first one that is a found value. If you combine
  it with looking for env. var. and only at the end have a hardcoded
  option it can be useful. 
  Note the use of brackets to nest the function calls.*/ -}}
  editor: {{ coalesce (env "VISUAL") (env "EDITOR") "/usr/bin/vim" }}
  personal: {{ $personal }}
  secrets: {{ $secrets }}
  git:
    user: {{ $gituser }}
    email: {{ $gitemail }}
