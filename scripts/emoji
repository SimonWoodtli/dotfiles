#!/usr/bin/bash
##TODO make `emoji` command available within vim like other fzf commands
##:Rg etc. => :emoji

## loop over array to check if dependencies are installed
_checkDependencies() {
  local -a dependencies=( xclip fzf sed cut tr )
  local -a missingDependencies=()
  for dependency in "${dependencies[@]}"; do
    command -v "$dependency" >/dev/null 2>&1 || missingDependencies+=( "$dependency" )
  done
  if [[ -n "${missingDependencies[@]}" ]]; then
    echo "ERROR: Missing dependency(ies): "${missingDependencies[@]}""
    exit 1
  fi
}
## fetch data and filter out stuff
## cut -d delimiter # and -f field 2
_createEmojiList() {
  _checkDependencies
  curl "https://unicode.org/Public/emoji/15.0/emoji-test.txt"                 \
    | sed 's|^#.*$||g'                        `#remove all comment lines`     \
    | cut -d '#' -f 2                         `#remove columns until last one`\
    | cut -c2-                                `#remove empty first character` \
    | sed '/^[[:blank:]]*$/d'                 `#remove all empty lines`       \
    | sed 's|E[[:digit:]]*\.[[:digit:]]*||g'  `#remove all E Numbers`         \
    | sed '/^.*skin.tone.*$/d'                `#remove all skin colors`       \
    > "$HOME/.local/share/emojidb/emoji.v15.0" #update 16 when published
}
## check if emojidb and emoji file are present or create them
_checkEmojiDirFile() {
  [[ -d "$HOME/.local/share/emojidb" ]] || mkdir "$HOME/.local/share/emojidb"
  [[ -f "$HOME/.local/share/emojidb/emoji.v15.0" ]] || _createEmojiList
}
##TODO echo only emoji after fzf and copy to clipboard
## copy the selected emoji to clipboard and print it
_copyEmojiClipboard() {
  ##TODO check if it is a modular/combined emoji if so store first two or
  ##more chars
  ## cut line and only store first character
  local emoji=$(fzf < "$HOME/.local/share/emojidb/emoji.v15.0" | cut -c 1-1)
  ## print and copy emoji
  echo "$emoji"; echo "$emoji" | tr -d '\n' | xclip -sel clipboard
}
_checkEmojiDirFile && _checkDependencies && _copyEmojiClipboard
##Additional:
## remove first 34 lines and last 10 lines from multi line string
#declare cutDataHeaderFooter=$(echo "$Data" | tail -n +34 | head -n -10 )
