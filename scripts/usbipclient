#!/bin/bash
## Author: Simon D. Woodtli
## thanks to David McKone for idea
################################# Setup ################################
## 1. Change to root user: `sudo su - root`
## 2. Run setup script: dotfiles/scripts/__usbip/server/setup
## 3. Edit usbipserver file: `sudo vi /usr/sbin/usbipserver`:
## Change the usbIds value to your own USBs you want to attach/detacch from server
declare arg="$1"
declare -a busIds=()
##TODO adjust the usbIds: add the ones you want to attach to this client
declare -a usbIds=("0951:1666")
##TODO adjust the server IP that runs usbip as a server
declare server="192.168.8.99"
#TODO refactor it so multiple servers can be used and usbIds are
#connected to the correct server using associative arrays

_getBusIds() {
  for usbId in "${usbIds[@]}"; do
    busIds+=("$(/usr/sbin/usbip list -r "$server" | grep "$usbId" | cut '-d:' -f1)")
  done
}

_startUsbip() {
  _getBusIds
  for busId in "${busIds[@]}"; do
    /usr/sbin/usbip attach -r "$server" --busid="$busId"
  done
}

_stopUsbip() {
  local output="$(/usr/sbin/usbip port)"
  ##I think directly running a subshell with `usbip port` without printf
  ##and output var won't work. Instead it'd add all ports to array
  ##element 0
  local -a ports=( $(printf '%s\n' "$output" | sed -En 's/^Port\s([0-9]{2}):.*/\1/p') )
  for port in "${ports[@]}"; do
    /usr/sbin/usbip detach --port="$port"
  done
}

case $arg in
  start) _startUsbip;;
  stop) _stopUsbip;;
  *) echo "Warning: Cmd requires argument start|stop";;
esac
