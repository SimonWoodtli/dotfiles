#!/bin/bash
#declare file="${!#}"
declare subcommand="$1"; shift
#declare subCmd=false
git status &>/dev/null || { echo "Warning: This script only works within a git repo"; exit 1; }

## FIXME find a way to only use this git cmd that i need anf if it fails
#exit program instead of using git status
#if git rev-parse --show-toplevel


declare projectPath="$(git rev-parse --show-toplevel)"
declare projectName="${projectPath##*/}"
## create a key for every project you wanna use and name it `age-keygen -o "key-nameOfGitRepo"`
export SOPS_AGE_KEY_FILE="$PRIVATE/bin/age/key-$projectName"
#[[ -z "$2" ]] && sops "$file"
## FIXME currently the `fzf` file select works only if files from PWD are
#selected make all cmds work even for files that are not just in PWD but
#from root git dir throughout whole repo.
decrypt() {
  ##FIXME only add an extension if the filename has a dot
  local file="$(fzf)"
  local extension="${file##*.}"
  local filename="${file%%.*}"
  local dot="."
  sops --decrypt "$file" > "${filename}${dot}$extension"
  #sops --decrypt "$file" > "fasdi"
}

cat() {
  local file="$(fzf)"
  sops --decrypt "$file"
}

partial-encrypt() {
  local file="$(fzf)"
  echo no
  ##TODO: create command for partial encryption of file, (just password) with regex
  echo "key1: value1" >  test_regex.yaml
  echo "key2: value2" >> test_regex.yaml
  echo "key3: value3" >> test_regex.yaml
  
  encrypt ?how to pass file --encrypted-regex='^(key1|key3)$'
}

encrypt() {
  local file="$(fzf)"
  local keyPath="$PRIVATE/bin/age/key-$projectName"
  local publicKey="$(\grep -oP "public key: \K(.*)" $keyPath)"
  ##FIXME only add an extension if the filename has a dot
  local extension="${file##*.}"
  local filename="${file%.*}"
  ## FIXME current does not show up in tab complete, I would need a multi
  #layer tab completion. Works for now
  echo $1
  if [[ "$1" == "current" ]]; then
    ## If you want to encrypted the given file without creating a new
    #file
    sops --encrypt --in-place --age "$publicKey" "$file"
  else
    sops --encrypt --age "$publicKey" "$file" > "$filename.enc.$extension"
  fi
}
edit() {
  ## directly edit encrypted file, my fav. sops feature!
  local file="$(fzf)"
  sops "$file"
}


## function call from $1 argument
declare -a commands=(decrypt cat partial-encrypt encrypt edit )
for i in ${commands[@]}; do
  if [[ "$i" == "$subcommand" ]]; then
    #subCmd=true
    "$subcommand" $*
  fi
done
#[[ "$subCmd" = false ]] && __edit

# Tab completion - add to bashrc: complete -C sopsi sopsi
if [ -n "$COMP_LINE" ]; then
  for cmd in ${commands[@]}; do
    [[ "${cmd:0:${#1}}" == "$1" ]] && echo $cmd
  done
  exit 0
fi
